I";l<p>This is the second entry of my posts on working with .NET (Mono) on Linux. The <a href="/tech/2015/12/09/mono-linux-setup.html">first</a> installment showed how to install Mono on Linux and execute a very basic C# program. Next I’ll go through the steps for setting up ASP.NET itself and running a website. As mentioned in my previous post there’s a dearth of articles and help for us .NET programmers coming over to the world of Linux so I want to do a bit more than just show a few steps but actually document what I’ve done to get things up and running in the real world.</p>

<p>Okay first fire up your Linux VM and login then install the nginx webserver.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>apt-get <span class="nb">install </span>nginx
</pre></td></tr></tbody></table></code></pre></figure>

<p>We’ll use nginx as a reverse proxy for fastcgi which is what will be doing all the work. This is an exmaple of where you can find yourself getting caught out with Mono as I found a lot of the documentation referenced the fastcgi version for Mono’s .NET 2.0 implementation. Anyhow, to install the correct version for this tutorial run the following command.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>apt-get <span class="nb">install </span>mono-fastcgi-server4
</pre></td></tr></tbody></table></code></pre></figure>

<p>There are a couple of additions that need to be made to the fastcgi parameters file so run the following command to open it up in vim.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>vi /etc/nginx/fastcgi_params
</pre></td></tr></tbody></table></code></pre></figure>

<p>And add the following to the file (actually I’m not sure it makes any difference if it’s at the top or the bottom but I added the entries to the top). If the entires exist already then just amend them to what I have them as below.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre>fastcgi_param   PATH_INFO               <span class="s2">""</span><span class="p">;</span>
fastcgi_param   SCRIPT_FILENAME         <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Then save and quit using the <code class="language-plaintext highlighter-rouge">!wq</code> commands for vim (explained in the previous post). Great, now everything’s in place for serving websites. Create a www directory for storing the websites.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">mkdir</span> ~/www
</pre></td></tr></tbody></table></code></pre></figure>

<p>Then create a directory for a demo website itself.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">mkdir</span> ~/www/aspnet
</pre></td></tr></tbody></table></code></pre></figure>

<p>Then create an aspx file using vim.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>vi ~/www/aspnet/Default.aspx
</pre></td></tr></tbody></table></code></pre></figure>

<p>In the vim editor paste the following code - we’ll use the ubiquitous ‘Hello World’ for our demo page :-)</p>

<figure class="highlight"><pre><code class="language-c#" data-lang="c#"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="p">&lt;%</span><span class="err">@</span> <span class="n">Page</span> <span class="n">AutoEventWireup</span><span class="p">=</span><span class="s">"true"</span> <span class="n">Language</span><span class="p">=</span><span class="s">"C#"</span> <span class="n">ContentType</span><span class="p">=</span><span class="s">"text/plain"</span> <span class="p">%&gt;</span>

<span class="p">&lt;</span><span class="n">script</span> <span class="n">runat</span><span class="p">=</span><span class="s">"server"</span><span class="p">&gt;</span>

  <span class="k">void</span> <span class="nf">Page_Load</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="s">"Hello World!"</span><span class="p">);</span>
  <span class="p">}</span>

<span class="p">&lt;/</span><span class="n">script</span><span class="p">&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Save the changes with the <code class="language-plaintext highlighter-rouge">!wq</code> vim command. Now we’ll create the configuration files so the site will work with nginx. Create a new file with vim.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>vi /etc/nginx/sites-available/aspnet.conf
</pre></td></tr></tbody></table></code></pre></figure>

<p>Now paste the following code into the new file and save the changes with the <code class="language-plaintext highlighter-rouge">!wq</code> vim command.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>server <span class="o">{</span>
        listen 80<span class="p">;</span>
        server_name aspnet.mono-demo<span class="p">;</span>

        location / <span class="o">{</span>
                root /home/deployer/www/aspnet/<span class="p">;</span>
                index index.html index.htm default.aspx Default.aspx<span class="p">;</span>
                fastcgi_index Default.aspx<span class="p">;</span>
                fastcgi_pass 127.0.0.1:9000<span class="p">;</span>
                include /etc/nginx/fastcgi_params<span class="p">;</span>
        <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The value next to <code class="language-plaintext highlighter-rouge">server_name</code> is your domain name. I’m using a local VM which has the name mono-demo but normally this would be the something like www.mysite.com. The other values are self explanatory although you might notice there are two entries for the default aspx web page. This is a gotcha for anyone coming from the Windows world - path and file names with different cases are treated seperately. If a user browses for Default.aspx and your file is uploaded as default.aspx the request will be treated as a 404 so you have to cater for this.</p>

<p>Next create a symlink in the nginx sites-enabled folder to point to the previously created nginx config file by running the following commands.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/aspnet.conf /etc/nginx/sites-enabled/aspnet.conf
</pre></td></tr></tbody></table></code></pre></figure>

<p>Restart the nginx service so our changes are picked up.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>service nginx restart
</pre></td></tr></tbody></table></code></pre></figure>

<p>Now we are finally ready to test our new web page and show some .NET code running. Run the following command.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>fastcgi-mono-server4 /applications<span class="o">=</span>/:/home/deployer/www/aspnet /socket<span class="o">=</span>tcp:127.0.0.1:9000
</pre></td></tr></tbody></table></code></pre></figure>

<p>If you browse to the domain entry in your aspnet.conf file you should see your web page working.</p>

<p><img src="/images/2016-01-07/2016-01-21@22.11.20-sm.jpg" alt="" /></p>

<p>That’s all well and good but it isn’t very practical to have a terminal open for each web site you want to run. This is where I started to experience some frustration as I really had to hunt around to find an adequate solution.</p>

<p><a href="https://fan0o.wordpress.com/2012/11/13/mono-and-nginx-for-asp-net">This</a> post pointed me in the right direction but this required putting all the configuration information for each site in the same file in the <code class="language-plaintext highlighter-rouge">/etc/init.d/</code> folder under root. Thankfully I came across the EPM Junkie blog which has a super helpful post <a href="http://epmjunkie.com/mono-fastcgi-startup-script">here</a> which tells me everything I need.</p>

<p>To tie everything up create the file <code class="language-plaintext highlighter-rouge">monoserve</code> by running the following command.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>vi /etc/init.d/monoserve
</pre></td></tr></tbody></table></code></pre></figure>

<p>And then copy and paste the following.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
</pre></td><td class="code"><pre><span class="c">#!/bin/bash</span>
<span class="c">### BEGIN INIT INFO</span>
<span class="c"># Provides: monoserve.sh</span>
<span class="c"># Required-Start: $local_fs $syslog $remote_fs</span>
<span class="c"># Required-Stop: $local_fs $syslog $remote_fs</span>
<span class="c"># Default-Start: 2 3 4 5</span>
<span class="c"># Default-Stop: 0 1 6</span>
<span class="c"># Short-Description: Start FastCGI Mono server with hosts</span>
<span class="c">### END INIT INFO</span>

<span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
<span class="nv">DAEMON</span><span class="o">=</span>/usr/bin/mono
<span class="nv">NAME</span><span class="o">=</span>monoserver
<span class="nv">DESC</span><span class="o">=</span>monoserver

<span class="c">## Begin -- MAKE CHANGES HERE --</span>
<span class="nv">PROGRAM</span><span class="o">=</span>fastcgi-mono-server4 <span class="c"># The program which will be started</span>
<span class="nv">ADDRESS</span><span class="o">=</span>127.0.0.1 <span class="c"># The address on which the server will listen</span>
<span class="nv">PORT</span><span class="o">=</span>9000 <span class="c"># The port on which the server will listen</span>
<span class="nv">USER</span><span class="o">=</span>www-data <span class="c"># The user under which the process will run</span>
<span class="nv">GROUP</span><span class="o">=</span><span class="nv">$USER</span> <span class="c"># The group under which the process will run</span>
<span class="nv">LOGFILE</span><span class="o">=</span>/var/log/mono/fastcgi.log
<span class="c">## End -- MAKE CHANGES HERE --</span>

<span class="c"># Determine the environment</span>
<span class="nv">MONOSERVER</span><span class="o">=</span><span class="si">$(</span>which <span class="nv">$PROGRAM</span><span class="si">)</span>
<span class="nv">MONOSERVER_PID</span><span class="o">=</span><span class="s2">""</span>
<span class="nv">FCGI_CONFIG_DIR</span><span class="o">=</span>/home/deployer/www/mono-fastcgi <span class="c"># /etc/mono/fcgi/apps-enabled</span>

<span class="c"># Start up the Mono server</span>
start_up<span class="o">(){</span>
    get_pid
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$MONOSERVER_PID</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>start-stop-daemon <span class="nt">-S</span> <span class="nt">-c</span> <span class="nv">$USER</span>:<span class="nv">$GROUP</span> <span class="nt">-x</span> <span class="nv">$MONOSERVER</span> <span class="nt">--</span> <span class="nt">--appconfigdir</span> <span class="nv">$FCGI_CONFIG_DIR</span> /socket<span class="o">=</span>tcp:<span class="nv">$ADDRESS</span>:<span class="nv">$PORT</span> /logfile<span class="o">=</span><span class="nv">$LOGFILE</span> &amp;
        <span class="nb">echo</span> <span class="s2">"Mono FastCGI Server </span><span class="nv">$PROGRAM</span><span class="s2"> started as </span><span class="nv">$USER</span><span class="s2"> on </span><span class="nv">$ADDRESS</span><span class="s2">:</span><span class="nv">$PORT</span><span class="s2">"</span>
    <span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"Mono FastCGI Server is already running - PID </span><span class="nv">$MONOSERVER_PID</span><span class="s2">"</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># Shut down the Mono server</span>
shut_down<span class="o">()</span> <span class="o">{</span>
    get_pid
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$MONOSERVER_PID</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">kill</span> <span class="nv">$MONOSERVER_PID</span>
        <span class="nb">echo</span> <span class="s2">"Mono FastCGI Server stopped"</span>
    <span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"Mono FastCGI Server is not running"</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># Refresh the PID</span>
get_pid<span class="o">()</span> <span class="o">{</span>
    <span class="nv">MONOSERVER_PID</span><span class="o">=</span><span class="si">$(</span>ps auxf | <span class="nb">grep</span> <span class="nv">$PROGRAM</span>.exe | <span class="nb">grep</span> <span class="nt">-v</span> <span class="nb">grep</span> | <span class="nb">awk</span> <span class="s1">'{print $2}'</span><span class="si">)</span>
<span class="o">}</span>

<span class="k">case</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="k">in
    </span>start<span class="p">)</span>
        start_up
    <span class="p">;;</span>
    stop<span class="p">)</span>
        shut_down
    <span class="p">;;</span>
    restart|force-reload<span class="p">)</span>
        shut_down
        start_up
    <span class="p">;;</span>
    status<span class="p">)</span>
        get_pid
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$MONOSERVER_PID</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"Mono FastCGI Server is not running"</span>
        <span class="k">else
            </span><span class="nb">echo</span> <span class="s2">"Mono FastCGI Server is running - PID </span><span class="nv">$MONOSERVER_PID</span><span class="s2">"</span>
        <span class="k">fi</span>
    <span class="p">;;</span>
    <span class="k">*</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Usage: monoserve (start|stop|restart|force-reload|status)"</span>
    <span class="p">;;</span>
<span class="k">esac</span>

<span class="nb">exit </span>0
</pre></td></tr></tbody></table></code></pre></figure>

<p>As per the previous steps when using vim run the <code class="language-plaintext highlighter-rouge">!wq</code> command to save the changes. There’s quite a lot going on in this file but the bits to note are the variables <code class="language-plaintext highlighter-rouge">FCGI_CONFIG_DIR</code> which points to a configuration file for our sites which we’ll create in a minute and <code class="language-plaintext highlighter-rouge">USER</code> and <code class="language-plaintext highlighter-rouge">GROUP</code> which refer to the <code class="language-plaintext highlighter-rouge">www-data</code> user and group which our sites will run under and have lower level privileges and are a lot safer than running under root! To get the <code class="language-plaintext highlighter-rouge">monoserve</code> service to start after a reboot run the following.</p>

<p>UPDATE: I’m not sure if this was a mistake on my part or if it’s because I’ve just tried this on a new version of Ubuntu than the one used when I wrote this tutorial but this step should be done after the execute permissions are set for the file (shown in the step after).</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>update-rc.d monoserve defaults
</pre></td></tr></tbody></table></code></pre></figure>

<p>Then run the following so <code class="language-plaintext highlighter-rouge">monoserve</code> has the correct permssions.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo chmod</span> +x /etc/init.d/monoserve
</pre></td></tr></tbody></table></code></pre></figure>

<p>There are a few gotchas referred to in the post mentioned above which are to do with folders and files not being present. We’ll need to create them so run the following commands.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="nb">sudo mkdir</span> /var/log/mono
<span class="nb">sudo mkdir</span> /var/www
<span class="nb">sudo mkdir</span> /var/www/.mono
</pre></td></tr></tbody></table></code></pre></figure>

<p>Set the correct permissions for the <code class="language-plaintext highlighter-rouge">.mono</code> folder.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo chown</span> <span class="nt">-R</span> www-data:www-data /var/www/.mono
</pre></td></tr></tbody></table></code></pre></figure>

<p>There’s also a log file that’s referenced in <code class="language-plaintext highlighter-rouge">monoserve</code> that also needs to be created and the correct permissions set. First create the file.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>vi /var/log/mono/fastcgi.log
</pre></td></tr></tbody></table></code></pre></figure>

<p>If you create a file with the <code class="language-plaintext highlighter-rouge">vi filename</code> command it won’t save anything if you haven’t added any text so hit return to add some whitespace and then save the file with the <code class="language-plaintext highlighter-rouge">!wq</code> command and then set the correct permissions.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo chown </span>www-data:www-data /var/log/mono/fastcgi.log
</pre></td></tr></tbody></table></code></pre></figure>

<p>The last folder we need to create for <code class="language-plaintext highlighter-rouge">monoserve</code> is the site configuration file so let’s do that.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">mkdir</span> ~/www/mono-fastcgi
</pre></td></tr></tbody></table></code></pre></figure>

<p>That’s everything setup for <code class="language-plaintext highlighter-rouge">monoserve</code> we’re now ready to add a site. Basically the service will check for files that are suffixed with <code class="language-plaintext highlighter-rouge">.webapp</code> in the <code class="language-plaintext highlighter-rouge">~/www/mono-fastcgi</code> folder we created earlier. So let’s create one for our demo app.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>vi ~/www/mono-fastcgi/aspnet.webapp
</pre></td></tr></tbody></table></code></pre></figure>

<p>Copy and paste the following into the text editor. The ony change you may need to make is the <code class="language-plaintext highlighter-rouge">vhost</code> tag which is the domain name for the site.</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="nt">&lt;apps&gt;</span>
  <span class="nt">&lt;web-application&gt;</span>
    <span class="nt">&lt;name&gt;</span>aspnet<span class="nt">&lt;/name&gt;</span>
    <span class="nt">&lt;vhost&gt;</span>aspnet.mono-demo<span class="nt">&lt;/vhost&gt;</span>
    <span class="nt">&lt;vport&gt;</span>80<span class="nt">&lt;/vport&gt;</span>
    <span class="nt">&lt;vpath&gt;</span>/<span class="nt">&lt;/vpath&gt;</span>
    <span class="nt">&lt;path&gt;</span>/home/deployer/www/aspnet<span class="nt">&lt;/path&gt;</span>
  <span class="nt">&lt;/web-application&gt;</span>
<span class="nt">&lt;/apps&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Once again run <code class="language-plaintext highlighter-rouge">!wq</code> to save the changes.</p>

<p>Now let’s start the <code class="language-plaintext highlighter-rouge">monoserve</code> service and also restart the <code class="language-plaintext highlighter-rouge">nginx</code> service.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="nb">sudo </span>service monoserve start
<span class="nb">sudo </span>service nginx restart
</pre></td></tr></tbody></table></code></pre></figure>

<p>That’s it! If you browse to the domain you set up for the site it should now view in the browser.</p>

<p>You can manage <code class="language-plaintext highlighter-rouge">monoserve</code> the same as any service by using the following commands.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="nb">sudo </span>service monoserve start
<span class="nb">sudo </span>service monoserve restart
<span class="nb">sudo </span>service monoserve stop
</pre></td></tr></tbody></table></code></pre></figure>

<p>Everything is now in place to add more sites without too much fuss. A quick check list of the files you’ll need to get a new site working with <code class="language-plaintext highlighter-rouge">monoserve</code> is below.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="c"># nginx site-name config file</span>
/etc/nginx/sites-available/site-name.conf

<span class="c"># symlink to /etc/nginx/sites-available/site-name.conf</span>
/etc/nginx/sites-enabled/site-name.conf

<span class="c"># monoserve site-name config file</span>
~/www/mono-fastcgi/site-name.webapp

<span class="c"># restart monoserve</span>
<span class="nb">sudo </span>service monoserve restart

<span class="c"># restart nginx</span>
<span class="nb">sudo </span>service monoserve restart
</pre></td></tr></tbody></table></code></pre></figure>

<p>That’s the end of this tutorial. I think it’s fairly instructive for getting something up and running that can be used in production. There are a couple of things I haven’t gone through to help with the work process but I’ll likely be documenting these at a later date and they are somewhat out of the scope of what we’re discussing here. Please add any comments below :-)</p>

<p>UPDATE 2: A new issue has come up as per <a href="http://stackoverflow.com/questions/24872394/access-to-the-path-etc-mono-registry-is-denied">this</a> Stack Overflow question. It was easily resolved by running the following commands but I’ve put it here as it’s another gotcha to look out for.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="nb">sudo mkdir</span> /etc/mono/registry
<span class="nb">sudo chmod </span>uog+rw /etc/mono/registry
</pre></td></tr></tbody></table></code></pre></figure>

<p>UPDATE 3 (2017-03-29): I just tried to set this up on a Digital Ocean VM and had a problem when i ran the <code class="language-plaintext highlighter-rouge">sudo update-rc.d monoserve defaults</code> command. This calls Perl and there was an issue with the locale settings. I found various solutions but the simplest seemed to be to reinstall the required packages with the following.</p>

<figure class="highlight"><pre><code class="language-zsh" data-lang="zsh"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">--reinstall</span> locales <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>dpkg-reconfigure locales
</pre></td></tr></tbody></table></code></pre></figure>

:ET