I"…|<p>Anyone whoâ€™s been reading my stuff knows one of my motivations is to provide documentation that is otherwise lacking for getting .NET to run on Linux. Part of the problem historically has been Microsoft only officially supporting Windows which has meant tutorials, Stack Overflow answers, user forums et al have been dominated by Windows and its tools (particularly Visual Studio). But in this brave new world of MS and Linux that is all about to change right? Well I hope so but we still have a way to go.</p>

<h4 id="net-installation">.NET Installation</h4>

<p>Anyway, my first port of call was the official MS docs <a href="https://docs.asp.net/en/latest/publishing/linuxproduction.html">here</a> which got me up and running but like a lot of the .NET Linux tutorials it left a few things out which will guarantee to leave anyone not familar with Linux scratching their head.</p>

<p>My previous tutorial for Mono <a href="http://coderscoffeehouse.com/tech/2016/01/19/aspnet-linux-setup.html">here</a> showed you how to get multiple ASP.NET sites up and running under a service and thatâ€™s what Iâ€™m going to show you here.</p>

<p>Iâ€™ll skip the first stage - installing Linux - as thereâ€™s a short tutorial I did before <a href="http://coderscoffeehouse.com/tech/2015/12/09/mono-linux-setup.html">here</a> which shows you how to get Ubuntu Server installed along with Mono (not necessary for this tutorial). Make sure to install the firewall (and ssh server so you can login remotely!) and vim which I use as my Linux text editor (and is used throughout the rest of this tutorial).</p>

<p>Once your server is up and running sign in and follow the steps <a href="https://www.microsoft.com/net/core#ubuntu">here</a> for installing <code class="language-plaintext highlighter-rouge">dotnet</code> itself. First youâ€™ll need to update the source list and install a key. Depending on your version the steps may vary slightly but theyâ€™re all straightforward. Iâ€™m using version 14.04 so the steps I executed were the following.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="nb">sudo </span>sh <span class="nt">-c</span> <span class="s1">'echo "deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span>
<span class="nb">sudo </span>apt-key adv <span class="nt">--keyserver</span> apt-mo.trafficmanager.net <span class="nt">--recv-keys</span> 417A0893
<span class="nb">sudo </span>apt-get update
</pre></td></tr></tbody></table></code></pre></figure>

<p>Then execute the following to install the runtime.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>apt-get <span class="nb">install </span>dotnet-dev-1.0.0-preview2-003121
</pre></td></tr></tbody></table></code></pre></figure>

<p>Thatâ€™s it for the installation. You can run the example as shown on the download page but it isnâ€™t necessary. Just run <code class="language-plaintext highlighter-rouge">dotnet --version</code> as a quick check and youâ€™ll see the following.</p>

<p><img src="/assets/posts/20160819/212703-sm-816dcab7386dbff46e240703956b4ab5.jpg" alt="" /></p>

<h4 id="web-server-setup">Web Server Setup</h4>

<p>Next install the webserver. Run the following.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>apt-get <span class="nb">install </span>nginx
</pre></td></tr></tbody></table></code></pre></figure>

<p>If you havenâ€™t already, enable the firewal and add following rules.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="nb">sudo </span>ufw <span class="nb">enable
sudo </span>ufw allow 22/tcp
<span class="nb">sudo </span>ufw allow 80/tcp
</pre></td></tr></tbody></table></code></pre></figure>

<h4 id="website-creation">Website Creation</h4>

<p>Now itâ€™s time to set up a site. Yeoman has some really good ASP.NET templates but for this example will go with something even more bare bones (I always prefer the absolute minimum when Iâ€™m trying out a new framework for the first time).</p>

<p>Weâ€™ll stay on our Linux server for this task - you would normally upload the files but thatâ€™s not necessary to demonstrate for this tutorial as weâ€™ll still go through the process of packaging the application. Create a directory for the new site and then navigate to the directory itself.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="nb">mkdir </span>aspnetcore
<span class="nb">cd </span>aspnetcore
<span class="nb">touch </span>Program.cs Startup.cs project.json appsettings.json
</pre></td></tr></tbody></table></code></pre></figure>

<p>This will have created some empty files weâ€™ll use to create our simple website. This will be a very basic â€˜Hello Worldâ€™ site. First copy and paste the following into the Program.cs file.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
      <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

    <span class="kt">var</span> <span class="n">host</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">WebHostBuilder</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">UseKestrel</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">UseConfiguration</span><span class="p">(</span><span class="n">builder</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">UseContentRoot</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
      <span class="p">.</span><span class="n">UseStartup</span><span class="p">&lt;</span><span class="n">Startup</span><span class="p">&gt;()</span>
      <span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

    <span class="n">host</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

  <span class="p">}</span>
  
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>As you can see, in ASP.NET Core a website is invoked the same way as a console application! Next we need to create the <code class="language-plaintext highlighter-rouge">Startup</code> class referenced in the <code class="language-plaintext highlighter-rouge">.UseStartup&lt;Startup&gt;()</code> line near the bottom so copy and paste the following into the Startup.cs file.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Http</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="n">context</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
      <span class="k">return</span> <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="nf">WriteAsync</span><span class="p">(</span><span class="s">"Hello World!"</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h4 id="website-configuration">Website Configuration</h4>

<p>Next copy and paste the following into the project.json file. This is a pretty bare bones settings file in terms of references.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="o">{</span>
  <span class="s2">"version"</span>: <span class="s2">"1.0.0-*"</span>,
  <span class="s2">"buildOptions"</span>: <span class="o">{</span>
    <span class="s2">"debugType"</span>: <span class="s2">"portable"</span>,
    <span class="s2">"emitEntryPoint"</span>: <span class="nb">true</span>
  <span class="o">}</span>,
  <span class="s2">"dependencies"</span>: <span class="o">{</span>
    <span class="s2">"Microsoft.AspNetCore.Mvc"</span>: <span class="s2">"1.0.0"</span>,
    <span class="s2">"Microsoft.AspNetCore.Server.Kestrel"</span>: <span class="s2">"1.0.0"</span>,
    <span class="s2">"Microsoft.Extensions.Configuration.Json"</span>: <span class="s2">"1.0.0"</span>,
    <span class="s2">"Microsoft.Extensions.Options.ConfigurationExtensions"</span>: <span class="s2">"1.0.0"</span>
  <span class="o">}</span>,
  <span class="s2">"frameworks"</span>: <span class="o">{</span>
    <span class="s2">"netcoreapp1.0"</span>: <span class="o">{</span>
      <span class="s2">"dependencies"</span>: <span class="o">{</span>
        <span class="s2">"Microsoft.NETCore.App"</span>: <span class="o">{</span>
          <span class="s2">"type"</span>: <span class="s2">"platform"</span>,
          <span class="s2">"version"</span>: <span class="s2">"1.0.0"</span>
        <span class="o">}</span>,
        <span class="s2">"Microsoft.AspNetCore.Server.Kestrel"</span>: <span class="s2">"1.0.0"</span>
      <span class="o">}</span>,
      <span class="s2">"imports"</span>: <span class="s2">"dnxcore50"</span>
    <span class="o">}</span>
  <span class="o">}</span>,
  <span class="s2">"publishOptions"</span>: <span class="o">{</span>
    <span class="s2">"include"</span>: <span class="o">[</span>
      <span class="s2">"wwwroot"</span>,
      <span class="s2">"Views"</span>,
      <span class="s2">"appsettings.json"</span>
    <span class="o">]</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Finally copy and paste the following into the appsettings.json file (if you look at the project.json file youâ€™ll see appsettings.json is referenced in the <code class="language-plaintext highlighter-rouge">publishOptions</code> section).</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="o">{</span>
  <span class="s2">"server.urls"</span>: <span class="s2">"http://localhost:5001"</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This appsettings.json file is important and was a crucial part missing from the official documentation. ASP.NET Core runs on the default port of 5000 but if youâ€™re hosting more than one site - a very â€˜real worldâ€™ scenario - then you need to be able to specify a different port for each site (of course to the outside world everything will appear on port 80 but we do some reverse proxying with nginx which weâ€™ll come to in a minute).</p>

<h4 id="net-publishing">.NET Publishing</h4>

<p>Once youâ€™ve created all your files run the following.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>dotnet restore
</pre></td></tr></tbody></table></code></pre></figure>

<p>This will grab the necessary packages referenced in the project.json file for you to be able to run your site. Once this is done you can check your site is working by running the following command.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>dotnet run
</pre></td></tr></tbody></table></code></pre></figure>

<p>You should see something like the following which shows the program is listening on port 5001.</p>

<p><img src="/assets/posts/20160819/125552-sm-7b589fc3520627f3d6622814ef1fb505.jpg" alt="" /></p>

<p>Press Ctrl+C to terminate the command as weâ€™re not quite ready to view the site in a browser yet. We need to package the application so run the following command.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>dotnet publish
</pre></td></tr></tbody></table></code></pre></figure>

<p>Again, this is where the official docs lack a bit of an explanation as it doesnâ€™t tell you where the published files are but if you look in your terminal youâ€™ll see it gives you a location.</p>

<p><img src="/assets/posts/20160819/130533-sm-161080bd6c3068513ee0dcfd67813bdd.jpg" alt="" /></p>

<p>In my case itâ€™s the following path.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>/home/deployer/aspnetcore/bin/Debug/netcoreapp1.0/publish
</pre></td></tr></tbody></table></code></pre></figure>

<p>Iâ€™ve been using Linux for a couple of years now but Iâ€™m still finding my way round as there are varying opinions on where to put your website files but for this Iâ€™m going to (mainly) follow the official documentation and put them in the var directory. Iâ€™m going to add a www subfolder as Iâ€™ve seen that used a few times. Youâ€™ll need to create it if it doesnâ€™t exist (using sudo). Afterwards copy the files in the project directory to a site folder.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="nb">sudo mkdir</span> /var/www
<span class="nb">sudo cp</span> <span class="nt">-r</span> /home/deployer/aspnetcore/bin/Debug/netcoreapp1.0/publish /var/www/aspnetcore
</pre></td></tr></tbody></table></code></pre></figure>

<h4 id="web-server-configuration">Web Server Configuration</h4>

<p>Our site is now ready to run but it canâ€™t be viewed by the outside world until weâ€™ve configured nginx. This is where the offical documentation is a bit unhelpful as it tells you to edit the default config file but this only works if you have one site on your server. Iâ€™ve noticed a lot of web tutorials for other languages do this and it confused me at first as when you go to the nginx website you can get a bit overwhelemed by documentation. In fact some people recommend deleting the default file as itâ€™s not really needed and you instead should create an nginx config file for each website on your server which you do here with the following</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>vim /etc/nginx/sites-available/aspnetcore
</pre></td></tr></tbody></table></code></pre></figure>

<p>Next copy and paste the following adjusting the <code class="language-plaintext highlighter-rouge">server_name</code> property to whatever your domain address is. Iâ€™m using a local VM for my example here hence the the top level domain as opposed to something more familiar like <code class="language-plaintext highlighter-rouge">coderscoffeehouse.com</code> but if youâ€™re using a publicly available server then youâ€™ll need to edit the DNS settings in your hosting providerâ€™s configuration settings.</p>

<p>server {
        listen 80;
        server_name aspnetcore.ubuntu;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    location / {
            proxy_pass http://localhost:5001;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection keep-alive;
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
    } }
</code></pre></div></div>

<p>Save the file with <code class="language-plaintext highlighter-rouge">!wq</code>. Then create a symlink in the nginx sites-enabled directory (otherwise it will just be ignored).</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/aspnetcore aspnetcore 
</pre></td></tr></tbody></table></code></pre></figure>

<p>The site is now ready to viewed from a browser which we can test by starting the nginx service and the dotnet app by running the following.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="nb">sudo </span>service nginx restart
dotnet /var/www/aspnetcore/aspnetcore.dll
</pre></td></tr></tbody></table></code></pre></figure>

<p>If you now browse to the address you used for the <code class="language-plaintext highlighter-rouge">server_name</code> in the nginx aspnetcore file you should see the following.</p>

<p><img src="/assets/posts/20160819/135007-sm-5622a0f96e1ccdd69e032389cb16769b.jpg" alt="" /></p>

<h4 id="automate-startup">Automate Startup</h4>

<p>Obviously from a practical point of view you canâ€™t run the application from the command line everytime you want your site up so we need to create a background process to do this. The offical documentation uses supervisor which I hadnâ€™t heard of but it seems to do the job. Press Ctrl+C to stop the current dotnet command (if necessary) and then run the following to install supervisor.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>apt-get <span class="nb">install </span>supervisor
</pre></td></tr></tbody></table></code></pre></figure>

<p>Then create a supervisor config file the site.</p>

<p>sudo vim /etc/supervisor/conf.d/aspnetcore.conf</p>

<p>Then paste the following.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="o">[</span>program:aspnetcore]
<span class="nb">command</span><span class="o">=</span>/usr/bin/dotnet /var/www/aspnetcore/aspnetcore.dll
<span class="nv">directory</span><span class="o">=</span>/var/www/aspnetcore
<span class="nv">autostart</span><span class="o">=</span><span class="nb">true
</span><span class="nv">autorestart</span><span class="o">=</span><span class="nb">true
</span><span class="nv">stderr_logfile</span><span class="o">=</span>/var/log/aspnetcore.err.log
<span class="nv">stdout_logfile</span><span class="o">=</span>/var/log/aspnetcore.out.log
<span class="nv">environment</span><span class="o">=</span><span class="nv">ASPNETCORE_ENVIRONMENT</span><span class="o">=</span>Production
<span class="nv">user</span><span class="o">=</span>www-data
<span class="nv">stopsignal</span><span class="o">=</span>INT
</pre></td></tr></tbody></table></code></pre></figure>

<p>The important lines here are the second and third which point to the correct locations for our site. Run <code class="language-plaintext highlighter-rouge">!wq</code> and save the file then run the following to the start the necessary services.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="nb">sudo </span>service supervisor restart
<span class="nb">sudo </span>service nginx restart
</pre></td></tr></tbody></table></code></pre></figure>

<p>If you open a browser you should now see your site up and running. You can restart the server and the site will automatically start.</p>

<h4 id="multiple-site-scenario">Multiple Site Scenario</h4>

<p>Thatâ€™s great but in the real world we might well have multiple ASP.NET sites on our server. Again the doc site didnâ€™t really give the necessary details for this but weâ€™ve already covered whatâ€™s necessary for this. To quickly create a duplicate site with a slight change navigate to the original aspnetcore website with the code files and go into the Startup.cs file (your original location might be different).</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="nb">cd</span> ~/aspnetcore
vim Startup.cs
</pre></td></tr></tbody></table></code></pre></figure>

<p>Then and change <code class="language-plaintext highlighter-rouge">Hello World!</code> to <code class="language-plaintext highlighter-rouge">Hello World!!</code> and save with <code class="language-plaintext highlighter-rouge">!wq</code>. Next edit the appsettings.json file.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>vim appsettings.json
</pre></td></tr></tbody></table></code></pre></figure>

<p>Change the value of the <code class="language-plaintext highlighter-rouge">server.urls</code> port from <code class="language-plaintext highlighter-rouge">5001</code> to <code class="language-plaintext highlighter-rouge">5002</code> and then type <code class="language-plaintext highlighter-rouge">!wq</code> to save the file.</p>

<p>Now run the following to create a new package.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>dotnet publish
</pre></td></tr></tbody></table></code></pre></figure>

<p>Now make copies of the previous files we needed to get our site running. You donâ€™t have to stick with what Iâ€™ve done below but to keep things simple Iâ€™ve just created the same files before apart from the <code class="language-plaintext highlighter-rouge">2</code> appended at the end.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="nb">sudo cp</span> <span class="nt">-r</span> ~/aspnetcore/bin/Debug/netcoreapp1.0/publish /var/www/aspnetcore2
<span class="nb">sudo cp</span> /etc/nginx/sites-available/aspnetcore /etc/nginx/sites-available/aspnetcore2
<span class="nb">sudo cp</span> /etc/supervisor/conf.d/aspnetcore.conf /etc/supervisor/conf.d/aspnetcore2.conf
<span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/aspnetcore2 aspnetcore2
</pre></td></tr></tbody></table></code></pre></figure>

<p>Open up the newly created <code class="language-plaintext highlighter-rouge">nginx</code> site configuration file.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>vim /etc/nginx/sites-available/aspnetcore2
</pre></td></tr></tbody></table></code></pre></figure>

<p>Change the value of the <code class="language-plaintext highlighter-rouge">server_name</code> to the relevant another domain name (Iâ€™ve changed <code class="language-plaintext highlighter-rouge">aspnetcore.ubuntu</code> to <code class="language-plaintext highlighter-rouge">aspnetcore2.ubuntu</code> for this tutorial). Then change the <code class="language-plaintext highlighter-rouge">proxypass</code> port from <code class="language-plaintext highlighter-rouge">5001</code> to <code class="language-plaintext highlighter-rouge">5002</code> and type <code class="language-plaintext highlighter-rouge">!wq</code> to save the file.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>server <span class="o">{</span>
        listen 80<span class="p">;</span>
        server_name aspnetcore2.ubuntu<span class="p">;</span>

        location / <span class="o">{</span>
                proxy_pass http://localhost:5002<span class="p">;</span>
                proxy_http_version 1.1<span class="p">;</span>
                proxy_set_header Upgrade <span class="nv">$http_upgrade</span><span class="p">;</span>
                proxy_set_header Connection keep-alive<span class="p">;</span>
                proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
                proxy_cache_bypass <span class="nv">$http_upgrade</span><span class="p">;</span>
        <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Open the <code class="language-plaintext highlighter-rouge">supservisor</code> configuration file we created a few moments ago.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>vim /etc/supervisor/conf.d/aspnetcore2.conf
</pre></td></tr></tbody></table></code></pre></figure>

<p>Change the second part of the <code class="language-plaintext highlighter-rouge">command</code> line from <code class="language-plaintext highlighter-rouge">/var/www/aspnetcore/aspnetcore.dll</code> to <code class="language-plaintext highlighter-rouge">/var/www/aspnetcore2/aspnetcore.dll</code> plus the other changes show below and then type <code class="language-plaintext highlighter-rouge">!wq</code> to save the file.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="o">[</span>program:aspnetcore2]
<span class="nb">command</span><span class="o">=</span>/usr/bin/dotnet /var/www/aspnetcore2/aspnetcore.dll
<span class="nv">directory</span><span class="o">=</span>/var/www/aspnetcore
<span class="nv">autostart</span><span class="o">=</span><span class="nb">true
</span><span class="nv">autorestart</span><span class="o">=</span><span class="nb">true
</span><span class="nv">stderr_logfile</span><span class="o">=</span>/var/log/aspnetcore2.err.log
<span class="nv">stdout_logfile</span><span class="o">=</span>/var/log/aspnetcore2.out.log
<span class="nv">environment</span><span class="o">=</span><span class="nv">ASPNETCORE_ENVIRONMENT</span><span class="o">=</span>Production
<span class="nv">user</span><span class="o">=</span>www-data
<span class="nv">stopsignal</span><span class="o">=</span>INT
</pre></td></tr></tbody></table></code></pre></figure>

<p>Restart the necessary services.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="nb">sudo </span>service supervisor restart
<span class="nb">sudo </span>service nginx restart
</pre></td></tr></tbody></table></code></pre></figure>

<p>Check you can still browse to your first website successfully.</p>

<p><img src="/assets/posts/20160819/135007-sm-5622a0f96e1ccdd69e032389cb16769b.jpg" alt="" /></p>

<p>And then you can browse to the second website successfully as well.</p>

<p><img src="/assets/posts/20160819/135042-sm-550b44c2d7715124c07a793c10ebbe62.jpg" alt="" /></p>

<h4 id="conclusion">Conclusion</h4>

<p>This is by no means an exhaustive tutorial but I think it provides enough information to get a production site running (in fact I will be doing just that for an internal API I have planned imminently). Please leave any comments below.</p>

<p>Thanks :-)</p>

<p><a href="http://www.jeffreyfritz.com/2016/08/should-i-use-asp-net-core-or-mvc-5/">http://www.jeffreyfritz.com/2016/08/should-i-use-asp-net-core-or-mvc-5/</a></p>

<p><a href="https://docs.asp.net/en/latest/publishing/linuxproduction.html">https://docs.asp.net/en/latest/publishing/linuxproduction.html</a></p>

<p><a href="http://benfoster.io/blog/how-to-configure-kestrel-urls-in-aspnet-core-rc2">http://benfoster.io/blog/how-to-configure-kestrel-urls-in-aspnet-core-rc2</a></p>

<p><a href="http://stackoverflow.com/questions/36001695/setting-base-path-using-configurationbuilder">http://stackoverflow.com/questions/36001695/setting-base-path-using-configurationbuilder</a></p>
:ET