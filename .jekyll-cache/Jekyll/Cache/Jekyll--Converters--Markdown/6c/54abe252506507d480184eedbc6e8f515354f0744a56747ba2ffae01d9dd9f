I"q<p>It’s generally seen as a good rule of thumb to avoid writing inline SQL and it’s a rule I try to observe - the obvious pitfall being it isn’t parsed until runtime. Stored procedures can mitigate against this but I tend to avoid - with cached queries the advantage of compilation isn’t there anymore and I find they add a layer of abstraction I don’t want. So sometimes I find myself getting down and dirty with a bit of inline SQL.</p>

<p>Anyhow, I’ve noticed my style of writing inline SQL has changed over the years. The first real world programming I did was in VBA and like a lot of people at the time I employed the Hungarian convention. And impossibly long SQL statements would all be one long continuous string seperated on different lines with underscores.</p>

<figure class="highlight"><pre><code class="language-vb" data-lang="vb"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="k">Dim</span> <span class="nv">strSQL</span> <span class="ow">As</span> <span class="kt">String</span>

<span class="n">strSQL</span> <span class="o">=</span> <span class="s">"SELECT ID, FirstName, LastName, CreatedDate, MofidifedDate "</span> <span class="n">_</span>
  <span class="s">"FROM ThisIsAnImpossiblyLongUsersTableName "</span> <span class="n">_</span>
  <span class="s">"WHERE ID = "</span> <span class="o">&amp;</span> <span class="n">intID</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>With the advent of .NET the Hungarian convention went out of fashion.  Code was more elegant and I found this was enhanced by concatenating the SQL string (I also learned to use a command object properly!).</p>

<figure class="highlight"><pre><code class="language-vb" data-lang="vb"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="k">Dim</span> <span class="nv">sql</span> <span class="o">=</span> <span class="kt">String</span><span class="p">.</span><span class="n">Empty</span>

<span class="n">sql</span> <span class="o">&amp;=</span> <span class="s">"SELECT Id, FirstName, LastName, CreatedDate, MofidifedDate "</span>
<span class="n">sql</span> <span class="o">&amp;=</span> <span class="s">"FROM ThisIsAnImpossiblyLongUsersTableName "</span>
<span class="n">sql</span> <span class="o">&amp;=</span> <span class="s">"WHERE Id = @Id "</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>And this approach served me for quite a while until recently. I don’t do much VB.NET these days. In fact I code less on the .NET stack than I used to but when I do it’s always C#. But I have legacy applications to support and sometimes there is a requirement for VB.NET. One of the things I like about C# is the ability to write multiline strings using the @ character.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="kt">var</span> <span class="n">sql</span> <span class="p">=</span> <span class="s">@"

  select Id, FirstName, LastName, CreatedDate, MofidifedDate
  from ThisIsAnImpossiblyLongUsersTableName
  where Id = @Id "</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>I found out you can do something similar to that above in VB.NET using Linq and XML. Import both the System.XML and System.XML.Linq namespaces and you can do the following.</p>

<figure class="highlight"><pre><code class="language-vb" data-lang="vb"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="k">Dim</span> <span class="nv">sql</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">sql</span><span class="o">&gt;</span>

  <span class="n">select</span> <span class="n">Id</span><span class="p">,</span> <span class="n">FirstName</span><span class="p">,</span> <span class="n">LastName</span><span class="p">,</span> <span class="n">CreatedDate</span><span class="p">,</span> <span class="n">MofidifedDate</span>
  <span class="n">from</span> <span class="n">ThisIsAnImpossiblyLongUsersTableName</span>
  <span class="n">where</span> <span class="n">Id</span> <span class="o">=</span> <span class="err">@</span><span class="n">Id</span>
  
  <span class="o">&lt;/</span><span class="n">sql</span><span class="o">&gt;</span><span class="p">.</span><span class="n">Value</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>I didn’t realise you could write inline XML and I think it’s pretty cool - I’ve tried to do the same in C# and not been able to (if someone knows different please let me know). I find this really handy as I can now write very readable SQL statements which can be copied and pasted into SSMS easily if need be.</p>
:ET